{"/home/travis/build/npmtest/node-npmtest-budo/test.js":"/* istanbul instrument in package npmtest_budo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-budo/lib.npmtest_budo.js":"/* istanbul instrument in package npmtest_budo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_budo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_budo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-budo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-budo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_budo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_budo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_budo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_budo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_budo.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_budo.__dirname +\n                    '/lib.npmtest_budo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-budo/budo/index.js":"var parseArgs = require('./lib/parse-args')\nvar budo = require('./lib/budo')\nvar color = require('term-color')\nvar stdoutStream = require('stdout-stream')\nvar exec = require('child_process').exec\n\nmodule.exports = budo\nmodule.exports.cli = budoCLI\n\nfunction budoCLI (args, opts) {\n  var argv = parseArgs(args, opts)\n\n  // if no stream is specified, default to stdout\n  if (argv.stream !== false) {\n    argv.stream = /^win/.test(process.platform) ? process.stdout : stdoutStream\n  }\n\n  var entries = argv._\n  delete argv._\n\n  argv.browserifyArgs = argv['--']\n  delete argv['--']\n\n  if (argv.version) {\n    console.log('budo v' + require('./package.json').version)\n    console.log('browserify v' + require('browserify/package.json').version)\n    console.log('watchify v' + require('watchify-middleware').getWatchifyVersion())\n    return null\n  }\n\n  if (argv.help) {\n    var help = require('path').join(__dirname, 'bin', 'help.txt')\n    require('fs').createReadStream(help)\n      .pipe(process.stdout)\n    return null\n  }\n\n  if (argv.outfile) {\n    console.error(color.yellow('WARNING'), '--outfile has been removed in budo@3.0')\n  }\n\n  if (typeof argv.port === 'string') {\n    argv.port = parseInt(argv.port, 10)\n  }\n  if (typeof argv.livePort === 'string') {\n    argv.livePort = parseInt(argv.livePort, 10)\n  }\n\n  // opts.live can be a glob or a boolean\n  if (typeof argv.live === 'string' && /(true|false)/.test(argv.live)) {\n    argv.live = argv.live === 'true'\n  }\n\n  // CLI only option for executing a child process\n  var instance = budo(entries, argv).on('error', exit)\n  var onUpdates = [].concat(argv.onupdate).filter(Boolean)\n  onUpdates.forEach(function (cmd) {\n    instance.on('update', execFunc(cmd))\n  })\n\n  return instance\n}\n\nfunction execFunc (cmd) {\n  return function run () {\n    var p = exec(cmd)\n    p.stderr.pipe(process.stderr)\n    p.stdout.pipe(process.stdout)\n  }\n}\n\nfunction exit (err) {\n  console.log(color.red('ERROR'), err.message)\n  process.exit(1)\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/parse-args.js":"var minimist = require('minimist')\nvar xtend = require('xtend')\n\nmodule.exports = parseArgs\nfunction parseArgs (args, opt) {\n  var argv = minimist(args, {\n    boolean: [\n      'stream',\n      'debug',\n      'errorHandler',\n      'forceDefaultIndex',\n      'open',\n      'portfind',\n      'pushstate',\n      'ndjson',\n      'verbose',\n      'cors',\n      'ssl'\n    ],\n    string: [\n      'host',\n      'port',\n      'dir',\n      'onupdate',\n      'serve',\n      'title',\n      'watchGlob',\n      'cert',\n      'key'\n    ],\n    default: module.exports.defaults,\n    alias: {\n      port: 'p',\n      ssl: 'S',\n      serve: 's',\n      cert: 'C',\n      key: 'K',\n      verbose: 'v',\n      help: 'h',\n      host: 'H',\n      dir: 'd',\n      live: 'l',\n      open: 'o',\n      watchGlob: [ 'wg', 'watch-glob' ],\n      errorHandler: 'error-handler',\n      forceDefaultIndex: 'force-default-index',\n      'live-port': ['L', 'livePort'],\n      pushstate: 'P'\n    },\n    '--': true\n  })\n  return xtend(argv, opt)\n}\n\nmodule.exports.defaults = {\n  title: 'budo',\n  port: 9966,\n  debug: true,\n  stream: true,\n  errorHandler: true,\n  portfind: true\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/budo.js":"var bole = require('bole')\nvar xtend = require('xtend')\nvar once = require('once')\nvar path = require('path')\nvar EventEmitter = require('events').EventEmitter\nvar isMatch = require('micromatch')\nvar openUrl = require('opn')\nvar internalIp = require('internal-ip')\nvar garnish = require('garnish')\n\nvar defaults = require('./parse-args').defaults\nvar getPorts = require('./get-ports')\nvar createServer = require('./server')\nvar createBundler = require('./bundler')\nvar createFileWatch = require('./file-watch')\nvar createTinylr = require('./tinylr')\nvar mapEntry = require('./map-entry')\n\nvar noop = function () {}\n\nmodule.exports = createBudo\nfunction createBudo (entries, opts) {\n  var log = bole('budo')\n\n  // if no entries are specified, just options\n  if (entries && !Array.isArray(entries) && typeof entries === 'object') {\n    opts = entries\n    entries = []\n  }\n\n  // do not mutate user options\n  opts = xtend({}, defaults, { stream: false }, opts)\n  entries = entries || []\n\n  // perhaps later this will be configurable\n  opts.cwd = process.cwd()\n\n  // log to output stream\n  if (opts.stream) {\n    // by default, pretty-print to the stream with info logging\n    if (!opts.ndjson) {\n      var pretty = garnish({\n        level: opts.verbose ? 'debug' : 'info',\n        name: 'budo'\n      })\n      pretty.pipe(opts.stream)\n      opts.stream = pretty\n    }\n\n    bole.output({\n      stream: opts.stream,\n      level: 'debug'\n    })\n  }\n\n  // optionally allow as arrays\n  entries = [].concat(entries).filter(Boolean)\n\n  var entryObjects = entries.map(mapEntry)\n  var entryFiles = entryObjects.map(function (entry) {\n    return entry.from\n  })\n\n  if (opts.serve && typeof opts.serve !== 'string') {\n    throw new TypeError('opts.serve must be a string or undefined')\n  } else if (!opts.serve && entries.length > 0) {\n    opts.serve = entryObjects[0].url\n  }\n\n  // default to cwd\n  if (!opts.dir || opts.dir.length === 0) {\n    opts.dir = opts.cwd\n  }\n\n  var emitter = new EventEmitter()\n  var bundler, middleware\n\n  if (entries.length > 0 || (opts.browserify && opts.browserify.entries)) {\n    bundler = createBundler(entryFiles, opts)\n    middleware = bundler.middleware\n\n    bundler.on('log', function (ev) {\n      if (ev.type === 'bundle') {\n        var time = ev.elapsed\n        ev.elapsed = time\n        ev.name = 'browserify'\n        ev.type = undefined\n        ev.colors = {\n          elapsed: time > 1000 ? 'yellow' : 'dim',\n          message: 'dim '\n        }\n        log.info(ev)\n      }\n    })\n\n    // uncaught syntax errors should not stop the server\n    // this only happens when errorHandler: false\n    bundler.on('error', function (err) {\n      console.error('Error:', err.message ? err.message : err)\n    })\n    bundler.on('bundle-error', emitter.emit.bind(emitter, 'bundle-error'))\n    bundler.on('update', emitter.emit.bind(emitter, 'update'))\n    bundler.on('pending', emitter.emit.bind(emitter, 'pending'))\n\n    emitter.on('update', function (contents, deps) {\n      if (deps.length > 1) {\n        log.debug({\n          name: 'browserify',\n          message: deps.length + ' files changed'\n        })\n      }\n    })\n  }\n\n  var defaultWatchGlob = opts.watchGlob || '**/*.{html,css}'\n  var server = null\n  var closed = false\n  var started = false\n  var fileWatcher = null\n  var tinylr = null\n  var sslOpts = null // needed for livereload\n  var deferredWatch = noop\n  var deferredLive = noop\n\n  // keep track of the original host\n  // (can be undefined)\n  var hostAddress = opts.host\n\n  // public API\n  emitter.close = once(close)\n  emitter.reload = reload\n  emitter.live = live\n  emitter.watch = watch\n\n  // setup defaults for live reload / watchify\n  if (opts.live) {\n    emitter\n      .watch()\n      .live()\n      .on('watch', function (ev, file) {\n        if (ev !== 'change' && ev !== 'add') {\n          return\n        }\n        defaultFileEvent(file)\n      })\n      .on('pending', function () {\n        defaultFileEvent(opts.serve)\n      })\n  }\n\n  // First, setup a server\n  createServer(middleware, opts, function (err, serverInstance, httpsCertKey) {\n    if (err) {\n      emitter.emit('error', err)\n      return\n    }\n\n    server = serverInstance\n    sslOpts = httpsCertKey\n\n    // start portfinding + connect\n    getPorts(opts, handlePorts)\n  })\n\n  return emitter\n\n  function defaultFileEvent (file) {\n    var filename = path.basename(file)\n    if ((Array.isArray(opts.live) || typeof opts.live === 'string') &&\n        isMatch(filename, opts.live).length === 0) {\n      return\n    }\n    emitter.reload(file)\n  }\n\n  function reload (file) {\n    process.nextTick(emitter.emit.bind(emitter, 'reload', file))\n    if (tinylr) {\n      tinylr.reload(file)\n    }\n  }\n\n  // enable file watch capabilities\n  function watch (glob, watchOpt) {\n    if (!started) {\n      deferredWatch = emitter.watch.bind(null, glob, watchOpt)\n    } else {\n      // destroy previous\n      if (fileWatcher) fileWatcher.close()\n      glob = glob && glob.length > 0 ? glob : defaultWatchGlob\n      glob = Array.isArray(glob) ? glob : [ glob ]\n      watchOpt = xtend({ poll: opts.poll }, watchOpt)\n\n      fileWatcher = createFileWatch(glob, watchOpt)\n      fileWatcher.on('watch', emitter.emit.bind(emitter, 'watch'))\n    }\n    return emitter\n  }\n\n  // enables LiveReload capabilities\n  function live (liveOpts) {\n    if (!started) {\n      deferredLive = emitter.live.bind(null, liveOpts)\n    } else {\n      // destroy previous\n      if (tinylr) tinylr.close()\n\n      // default port\n      liveOpts = xtend({ port: opts.livePort }, liveOpts)\n\n      // default to budo host\n      var hostName = liveOpts.host ? getHostAddress(liveOpts.host) : opts.host\n\n      // the LiveReload <script> tag needs the actual host IP\n      server.setLiveOptions(xtend({ host: hostName }, liveOpts))\n\n      // the server should use :: or undefined for internal IP\n      var tinylrOpts = xtend({ host: hostAddress }, sslOpts, liveOpts)\n      tinylr = createTinylr(tinylrOpts)\n    }\n    return emitter\n  }\n\n  function getHostAddress (host) {\n    // user can specify \"::\" or \"0.0.0.0\" as host exactly\n    // or if undefined, default to internal-ip\n    if (!host) {\n      host = server.address().address\n      if (host === '0.0.0.0') {\n        // node 0.10 returns this when no host is specified\n        // node 0.12 returns internal-ip\n        host = '::'\n      }\n    }\n    if (host === '::') {\n      host = internalIp()\n    }\n    return host\n  }\n\n  function handlePorts (err, result) {\n    if (closed) return\n    if (err) {\n      emitter.emit('error', err)\n      return\n    }\n\n    opts.port = result.port\n    opts.livePort = result.livePort\n\n    // improve error messaging\n    server.on('error', function (err) {\n      if (err.code === 'EADDRINUSE') {\n        err.message = 'port ' + opts.port + ' is in use'\n        emitter.emit('error', err)\n      } else {\n        emitter.emit('error', err)\n      }\n    })\n\n    // start server\n    // no host -> use localhost + internal-ip\n    server.listen(opts.port, opts.host || undefined, connect)\n  }\n\n  function connect () {\n    if (closed) return\n    started = true\n\n    // default host is internal IP\n    opts.host = getHostAddress(opts.host)\n\n    var port = opts.port\n    var protocol = opts.ssl ? 'https' : 'http'\n    var uri = protocol + '://' + opts.host + ':' + port + '/'\n\n    log.info({ message: 'Server running at', url: uri, type: 'connect' })\n\n    // if live() or watch() was called before connection\n    deferredWatch()\n    deferredLive()\n\n    // provide info on server connection\n    emitter.emit('connect', {\n      uri: uri,\n      port: port,\n      livePort: opts.livePort,\n      host: opts.host,\n      serve: opts.serve,\n      entries: entryFiles,\n      server: server,\n      dir: opts.dir\n    })\n\n    // initial bundle should come after\n    // connect event!\n    if (bundler) bundler.bundle()\n\n    // launch browser\n    if (opts.open) {\n      openUrl(uri)\n    }\n  }\n\n  function close () {\n    var next = emitter.emit.bind(emitter, 'exit')\n    if (started) {\n      server.once('close', next)\n    } else {\n      process.nextTick(next)\n    }\n\n    if (started) bole.reset()\n    if (started) server.close()\n    if (tinylr) tinylr.close()\n    if (bundler) bundler.close()\n    if (fileWatcher) fileWatcher.close()\n    closed = true\n    started = false\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/get-ports.js":"var xtend = require('xtend')\nvar getPorts = require('get-ports')\n\nmodule.exports = getServerPorts\nfunction getServerPorts (opt, cb) {\n  opt = xtend({ port: 9966, livePort: 35729 }, opt)\n\n  // try to use exact port specified or the defaults\n  if (!opt.portfind) {\n    return process.nextTick(function () {\n      cb(null, {\n        port: opt.port,\n        livePort: opt.livePort\n      })\n    })\n  }\n\n  // find our multiple available ports\n  getPorts([ opt.port, opt.livePort ], function (err, ports) {\n    if (err) return cb(err)\n    cb(null, {\n      port: ports[0], livePort: ports[1]\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/server.js":"var http = require('http')\nvar https = require('https')\nvar pem = require('pem')\nvar createMiddleware = require('./middleware')\nvar fs = require('fs')\n\nmodule.exports = function createServer (entryMiddleware, opts, cb) {\n  var handler = createMiddleware(entryMiddleware, opts)\n  var ssl = opts.ssl\n\n  if (ssl && (!opts.cert && opts.key) || (!opts.key && opts.cert)) {\n    throw new TypeError('If you specify a cert, you must specify a key and vice versa.\\n' +\n        'Or, you can omit the \"cert\" and \"key\" options to generate a new self-signed certificate.')\n  }\n\n  if (opts.ssl) {\n    if (opts.cert && opts.key) {\n      // user specified their own cert/key pair\n      create({\n        cert: fs.readFileSync(opts.cert),\n        key: fs.readFileSync(opts.key)\n      })\n    } else {\n      // generate a self-signed cert\n      pem.createCertificate({ days: 1, selfSigned: true }, function (err, keys) {\n        if (err) return cb(err)\n        create({\n          key: keys.serviceKey,\n          cert: keys.certificate\n        })\n      })\n    }\n  } else {\n    // no HTTPS, handle normally\n    create()\n  }\n\n  function create (httpsOpts) {\n    var server = ssl\n      ? https.createServer(httpsOpts, handler)\n      : http.createServer(handler)\n    server.setLiveOptions = handler.setLiveOptions\n\n    // TODO: Perhaps --ssl should support some sort of HTTP -> HTTPS redirect\n    process.nextTick(function () {\n      cb(null, server, httpsOpts)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/middleware.js":"// TODO: Expose this like webpack-dev-server middleware\nvar stacked = require('stacked')\nvar serveStatic = require('serve-static')\nvar defaultIndex = require('simple-html-index')\nvar logger = require('./simple-http-logger')\nvar urlLib = require('url')\nvar pushState = require('connect-pushstate')\nvar liveReload = require('inject-lr-script')\nvar urlTrim = require('url-trim')\nvar escapeHtml = require('escape-html')\n\nmodule.exports = budoMiddleware\nfunction budoMiddleware (entryMiddleware, opts) {\n  opts = opts || {}\n  var staticPaths = [].concat(opts.dir).filter(Boolean)\n  if (staticPaths.length === 0) {\n    staticPaths = [ process.cwd() ]\n  }\n\n  var entrySrc = opts.serve\n  var live = opts.live\n  var cors = opts.cors\n  var handler = stacked()\n  var middlewares = [].concat(opts.middleware).filter(Boolean)\n\n  // Everything is logged except favicon.ico\n  var logHandler = logger({\n    ignore: [ '/favicon.ico' ]\n  })\n  handler.use(function (req, res, next) {\n    if (cors) {\n      res.setHeader('Access-Control-Allow-Headers', 'Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With')\n      res.setHeader('Access-Control-Allow-Methods', 'GET, PUT, POST')\n      res.setHeader('Access-Control-Allow-Origin', '*')\n    }\n    logHandler(req, res, next)\n  })\n\n  // User middleware(s) can override others\n  middlewares.forEach(function (middleware) {\n    if (typeof middleware !== 'function') {\n      throw new Error('middleware options must be functions')\n    }\n    handler.use(function (req, res, next) {\n      logHandler.type = 'middleware'\n      middleware(req, res, next)\n    })\n  })\n\n  // Re-route for pushState support\n  if (opts.pushstate) handler.use(pushState())\n\n  // Inject liveReload snippet on response\n  var liveInjector = liveReload()\n  handler.use(function (req, res, next) {\n    if (!live || live.plugin) return next()\n    if (live.host) liveInjector.host = live.host\n    if (live.port) liveInjector.port = live.port\n    liveInjector(req, res, next)\n  })\n\n  // Entry (watchify) middleware\n  if (entryMiddleware) {\n    var entryRoute = '/' + urlLib.parse(entrySrc).pathname\n    handler.use(function (req, res, next) {\n      if (urlTrim(req.url) === urlTrim(entryRoute)) {\n        entryMiddleware(req, res, next)\n      } else {\n        next()\n      }\n    })\n  }\n\n  // Ignore favicon clutter\n  handler.mount('/favicon.ico', favicon)\n\n  // If the user wishes to *always* serve\n  // a generated index instead of a static one.\n  if (opts.forceDefaultIndex) {\n    handler.use(indexHandler)\n  }\n\n  // Static assets (html/images/etc)\n  staticPaths.forEach(function (rootFile) {\n    var staticHandler = serveStatic(rootFile, {\n      cacheControl: false\n    })\n    handler.use(function (req, res, next) {\n      logHandler.type = 'static'\n      staticHandler(req, res, next)\n    })\n  })\n\n  // Generates a default index.html\n  // when none is found locally.\n  handler.use(indexHandler)\n\n  // Handle errors\n  handler.use(function (req, res) {\n    res.statusCode = 404\n    res.end('404 not found: ' + escapeHtml(req.url))\n  })\n\n  // Allow live options to be changed at runtime\n  handler.setLiveOptions = setLiveOptions\n  return handler\n\n  function setLiveOptions (opts) {\n    live = opts\n  }\n\n  function favicon (req, res) {\n    var maxAge = 345600 // 4 days\n    res.setHeader('Cache-Control', 'public, max-age=' + Math.floor(maxAge / 1000))\n    res.setHeader('Content-Type', 'image/x-icon')\n    res.statusCode = 200\n    res.end()\n  }\n\n  function indexHandler (req, res, next) {\n    if (urlLib.parse(req.url).pathname === '/' || /\\/index.html?/i.test(req.url)) {\n      // If we reach this, our response will be generated\n      // (not static from local file system)\n      logHandler.type = 'generated'\n      res.setHeader('content-type', 'text/html')\n\n      var stream = opts.defaultIndex || defaultIndex\n      stream({\n        entry: entrySrc,\n        title: opts.title,\n        css: opts.css,\n        base: opts.base === true ? '/' : (opts.base || null)\n      }).pipe(res)\n    } else {\n      next()\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/simple-http-logger.js":"var log = require('bole')('budo')\nvar onResHeaders = require('on-headers')\nvar onResFinished = require('on-finished')\n\nmodule.exports = simpleHttpLoggerMiddleware\nfunction simpleHttpLoggerMiddleware (opts) {\n  opts = opts || {}\n  var ignores = [].concat(opts.ignore).filter(Boolean)\n\n  var httpLogger = function simpleHttpLogger (req, res, next) {\n    if (ignores.indexOf(req.url) >= 0) return next()\n    if (!req.url) return next()\n\n    // request data\n    req._startAt = undefined\n\n    // response data\n    res._startAt = undefined\n\n    // record request start\n    recordStartTime.call(req)\n\n    var byteLength = 0\n    var logRequest = function () {\n      if (!req._startAt || !res._startAt) {\n        // missing request and/or response start time\n        return\n      }\n\n      // calculate diff\n      var ms = (res._startAt[0] - req._startAt[0]) * 1000 +\n        (res._startAt[1] - req._startAt[1]) * 1e-6\n\n      log.info({\n        elapsed: ms,\n        contentLength: byteLength,\n        method: (req.method || 'GET').toUpperCase(),\n        url: req.url,\n        statusCode: res.statusCode,\n        type: httpLogger.type === 'static' ? undefined : httpLogger.type,\n        colors: {\n          elapsed: ms > 1000 ? 'yellow' : 'dim'\n        }\n      })\n    }\n\n    var isAlreadyLogging = res._simpleHttpLogger\n    res._simpleHttpLogger = true\n\n    if (!isAlreadyLogging) {\n      // record response start\n      onResHeaders(res, recordStartTime)\n\n      // log when response finished\n      onResFinished(res, logRequest)\n\n      var writeFn = res.write\n\n      // catch content-length of payload\n      res.write = function (payload) {\n        if (payload) byteLength += payload.length\n        return writeFn.apply(res, arguments)\n      }\n    }\n\n    next()\n  }\n\n  httpLogger.type = 'static'\n  return httpLogger\n}\n\nfunction recordStartTime () {\n  this._startAt = process.hrtime()\n}","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/bundler.js":"var xtend = require('xtend')\nvar createMiddleware = require('watchify-middleware').emitter\nvar fromArgs = require('browserify/bin/args')\nvar browserify = require('browserify')\nvar path = require('path')\nvar defaultErrorHandler = require('./error-handler')\n\nmodule.exports = createBundler\nfunction createBundler (files, opts) {\n  var bOpts = xtend({\n    cache: {},\n    packageCache: {},\n    debug: opts.debug\n  }, opts.browserify)\n\n  var bundler\n  var args = opts.browserifyArgs\n  if (args && Array.isArray(args)) {\n    // CLI args for browserify\n    bundler = fromArgs(args, bOpts)\n  } else {\n    // just assume JS only options\n    bundler = browserify(bOpts)\n  }\n\n  files.forEach(function (file) {\n    bundler.add(path.resolve(file))\n  })\n\n  var errorHandler = opts.errorHandler\n  if (typeof errorHandler !== 'function' && errorHandler !== false) {\n    errorHandler = defaultErrorHandler\n  }\n\n  var cwd = opts.cwd\n  var rootDirName\n  if (cwd) {\n    cwd = path.normalize(cwd)\n    rootDirName = path.basename(cwd) + path.sep\n  }\n  return createMiddleware(bundler, {\n    delay: opts.delay || 0,\n    initialBundle: false,\n    errorHandler: typeof errorHandler === 'function'\n      ? function (err) { // pass along directories as well\n        return errorHandler(err, cwd, rootDirName)\n      }\n      : errorHandler // pass undefined / false / etc\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/error-handler.js":"var stripAnsi = require('strip-ansi')\n\nmodule.exports = errorHandler\nmodule.exports.render = bundleError\n\nfunction bundleError (message, cwd, rootDirName) {\n  // Everything has to be contained inside this function\n  // for it to get stringified correctly. i.e. no require()!\n  console.error(message)\n\n  if (typeof document === 'undefined') {\n    return\n  } else if (!document.body) {\n    document.addEventListener('DOMContentLoaded', createErrorBox)\n  } else {\n    createErrorBox()\n  }\n\n  function createErrorBox () {\n    var parsed = parseError(message)\n\n    var overlayBox = document.createElement('div')\n    css(overlayBox, {\n      position: 'fixed',\n      width: '100%',\n      height: '100%',\n      zIndex: '100000000',\n      top: '0',\n      left: '0',\n      padding: '20px',\n      margin: '0px',\n      'box-sizing': 'border-box',\n      background: '#fff',\n      display: 'block',\n      'font-size': '14px',\n      'font-weight': 'normal',\n      'font-family': 'monospace'\n    })\n\n    if (!parsed.format) {\n      var pre = document.createElement('pre')\n      pre.textContent = message\n      css(pre, {\n        'word-wrap': 'break-word',\n        'white-space': 'pre-wrap',\n        'box-sizing': 'border-box',\n        margin: '0',\n        color: '#ff0000'\n      })\n      overlayBox.appendChild(pre)\n    } else {\n      var commonElements = []\n\n      var messageDiv = document.createElement('div')\n      commonElements.push(messageDiv)\n      messageDiv.textContent = parsed.message\n      overlayBox.appendChild(messageDiv)\n      css(messageDiv, {\n        color: '#ff2e2e',\n        'font-size': '16px'\n      })\n\n      var pathLocContainer = document.createElement('div')\n      css(pathLocContainer, { 'padding-top': '10px' })\n\n      if (isFinite(parsed.line)) {\n        var location = document.createElement('div')\n        commonElements.push(location)\n        var colStr = isFinite(parsed.column) ? (', column ' + parsed.column) : ''\n        location.textContent = ('line ' + parsed.line + colStr).trim()\n        css(location, {\n          color: 'hsl(0, 0%, 50%)',\n          'padding-bottom': '0px',\n          'font-size': '12px',\n          'font-weight': 'bold'\n        })\n        pathLocContainer.appendChild(location)\n      }\n\n      var path = document.createElement('div')\n      path.textContent = trimPath(parsed.path)\n      commonElements.push(path)\n      css(path, { 'font-style': 'italic' })\n      pathLocContainer.appendChild(path)\n      overlayBox.appendChild(pathLocContainer)\n\n      if (parsed.code) {\n        var sourceContainer = document.createElement('div')\n        var source = document.createElement('div')\n        var hr = document.createElement('div')\n        css(hr, {\n          background: 'hsl(0, 0%, 90%)',\n          width: '100%',\n          height: '2px',\n          padding: '0',\n          'margin-bottom': '10px',\n          'margin-top': '10px'\n        })\n        commonElements.push(source)\n        source.textContent = parsed.code\n        css(source, {\n          color: 'black',\n          'font-weight': 'bold',\n          'font-size': '14px',\n          'padding-left': '0px'\n        })\n\n        sourceContainer.appendChild(hr)\n        sourceContainer.appendChild(source)\n        overlayBox.appendChild(sourceContainer)\n      }\n\n      // apply common styles\n      commonElements.forEach(function (e) {\n        css(e, {\n          'word-wrap': 'break-word',\n          'white-space': 'pre-wrap',\n          'box-sizing': 'border-box',\n          display: 'block',\n          margin: '0',\n          'vertical-align': 'bottom'\n        })\n      })\n    }\n    document.body.appendChild(overlayBox)\n  }\n\n  function trimPath (filePath) {\n    if (filePath.indexOf(cwd) === 0) {\n      filePath = rootDirName + filePath.substring(cwd.length + 1)\n    }\n    return filePath\n  }\n\n  function css (element, style) {\n    Object.keys(style).forEach(function (k) {\n      element.style[k] = style[k]\n    })\n  }\n\n  // parse an error message into pieces\n  function parseError (err) {\n    var filePath, lineNum, splitLines\n    var result = {}\n\n    // For root files that syntax-error doesn't pick up:\n    var parseFilePrefix = 'Parsing file '\n    if (err.indexOf(parseFilePrefix) === 0) {\n      var pathWithErr = err.substring(parseFilePrefix.length)\n      filePath = getFilePath(pathWithErr)\n      if (!filePath) return result\n      result.path = filePath\n      var messageAndLine = pathWithErr.substring(filePath.length)\n      lineNum = /\\((\\d+):(\\d+)\\)/.exec(messageAndLine)\n      if (!lineNum) return result\n      result.message = messageAndLine.substring(1, lineNum.index).trim()\n      result.line = parseInt(lineNum[1], 10)\n      result.column = parseInt(lineNum[2], 10)\n      result.format = true\n      return result\n    }\n\n    // if module not found\n    var cannotFindModule = /^Cannot find module '(.+)' from '(.+)'(?:$| while parsing file: (.*)$)/.exec(err.trim())\n    if (cannotFindModule) {\n      result.missingModule = cannotFindModule[1]\n      result.path = cannotFindModule[3] || cannotFindModule[2]\n      result.message = \"Cannot find module '\" + result.missingModule + \"'\"\n      result.format = true\n      return result\n    }\n\n    // syntax-error returns the path and line number, also a \\n at start\n    err = err.trim()\n    filePath = getFilePath(err)\n    if (!filePath) return result\n    result.path = filePath\n\n    var restOfMessage = err.substring(filePath.length)\n    var parsedSyntaxError = /^:(\\d+)/.exec(restOfMessage)\n    if (parsedSyntaxError) { // this is a syntax-error\n      lineNum = parseInt(parsedSyntaxError[1], 10)\n      if (isFinite(lineNum)) result.line = lineNum\n      splitLines = restOfMessage.split('\\n')\n      var code = splitLines.slice(1, splitLines.length - 1).join('\\n')\n      result.code = code\n      result.message = splitLines[splitLines.length - 1]\n      result.format = true\n      return result\n    }\n\n    // remove colon\n    restOfMessage = restOfMessage.substring(1).trim()\n    var whileParsing = 'while parsing file: '\n    var whileParsingIdx = restOfMessage.indexOf(whileParsing)\n    if (whileParsingIdx >= 0) {\n      var beforeWhile = restOfMessage.substring(0, whileParsingIdx)\n      lineNum = /\\((\\d+):(\\d+)\\)/.exec(beforeWhile.split('\\n')[0])\n      var messageStr = beforeWhile\n      if (lineNum) {\n        var line = parseInt(lineNum[1], 10)\n        var col = parseInt(lineNum[2], 10)\n        if (isFinite(line)) result.line = line\n        if (isFinite(col)) result.column = col\n        messageStr = messageStr.substring(0, lineNum.index)\n      }\n      result.message = messageStr.trim()\n      splitLines = restOfMessage.split('\\n')\n      result.code = splitLines.slice(2).join('\\n')\n      result.format = true\n    }\n\n    return result\n  }\n\n  // get a file path from the error message\n  function getFilePath (str) {\n    var hasRoot = /^[a-z]:/i.exec(str)\n    var colonLeftIndex = 0\n    if (hasRoot) {\n      colonLeftIndex = hasRoot[0].length\n    }\n    var pathEnd = str.split('\\n')[0].indexOf(':', colonLeftIndex)\n    if (pathEnd === -1) {\n      // invalid string, return non-formattable result\n      return null\n    }\n    return str.substring(0, pathEnd)\n  }\n}\n\nfunction errorHandler (err, cwd, rootDirName) {\n  console.error('%s', err)\n  var msgStr = stripAnsi(err.message)\n  var params = [\n    JSON.stringify(msgStr),\n    JSON.stringify(cwd),\n    JSON.stringify(rootDirName)\n  ].join(',')\n  return ';(' + bundleError + ')(' + params + ');'\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/file-watch.js":"// a thin wrapper around chokidar file watching HTML / CSS\nvar watch = require('chokidar').watch\nvar xtend = require('xtend')\nvar Emitter = require('events/')\n\nvar ignores = [\n  'node_modules/**', 'bower_components/**',\n  '.git', '.hg', '.svn', '.DS_Store',\n  '*.swp', 'thumbs.db', 'desktop.ini'\n]\n\nmodule.exports = function (glob, opt) {\n  opt = xtend({\n    usePolling: opt && opt.poll,\n    ignored: ignores,\n    ignoreInitial: true\n  }, opt)\n\n  var emitter = new Emitter()\n  var closed = false\n  var ready = false\n\n  var watcher = watch(glob, opt)\n  watcher.on('add', onWatch.bind(null, 'add'))\n  watcher.on('change', onWatch.bind(null, 'change'))\n\n  // chokidar@1.0.0-r6 only allows close after ready event\n  watcher.once('ready', function () {\n    ready = true\n    if (closed) watcher.close()\n  })\n\n  function onWatch (event, path) {\n    emitter.emit('watch', event, path)\n  }\n\n  emitter.close = function () {\n    if (closed) return\n    if (ready) watcher.close()\n    closed = true\n  }\n  return emitter\n}\n\nmodule.exports.ignores = ignores\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/tinylr.js":"// a thin wrapper around tiny-lr module\nvar log = require('bole')('budo')\nvar xtend = require('xtend')\nvar tinylr = require('tiny-lr')\n\nmodule.exports = function (opt) {\n  opt = xtend(opt)\n  if (typeof opt.port !== 'number') {\n    opt.port = 35729\n  }\n\n  var server = tinylr({\n    cert: opt.cert,\n    key: opt.key\n  })\n  var closed = false\n  var ready = false\n\n  server.listen(opt.port, opt.host || undefined, function () {\n    ready = true\n    if (closed) return server.close()\n    log.info({ message: 'LiveReload running on ' + opt.port })\n  })\n\n  var serverImpl = server.server\n  serverImpl.removeAllListeners('error')\n  serverImpl.on('error', function (err) {\n    if (err.code === 'EADDRINUSE') {\n      process.stderr.write('ERROR: livereload not started, port ' + opt.port + ' is in use\\n')\n    } else {\n      process.stderr.write((err.stack ? err.stack : err) + '\\n')\n    }\n    close()\n  })\n\n  function close () {\n    if (closed) return\n    if (ready) server.close()\n    closed = true\n  }\n\n  return {\n    close: close,\n\n    reload: function reload (path) {\n      try {\n        server.changed({\n          body: {\n            files: path ? [ path ] : '*'\n          }\n        })\n      } catch (e) {\n        throw e\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-budo/budo/lib/map-entry.js":"var path = require('path')\nvar url = require('url')\nvar resolve = require('resolve')\n\nmodule.exports = mapEntry\nfunction mapEntry (file) {\n  if (file === '.') {\n    file = entry()\n  }\n\n  var parts\n  // absolute path with letter drive, eg C:/\n  if (/^[A-Z]:[/\\\\]+/.test(file)) {\n    parts = file.split(/:(?:(?=[^/\\\\]))/)\n  } else {\n    parts = file.split(':')\n  }\n\n  var pathFrom, pathUrl\n\n  if (parts.length > 1 && parts[1].length > 0) {\n    pathFrom = parts[0]\n    pathUrl = parts[1]\n\n    if (pathFrom === '.') {\n      pathFrom = entry()\n    }\n  } else {\n    pathFrom = file\n    pathUrl = url.parse(path.basename(pathFrom)).pathname\n  }\n\n  return {\n    url: pathUrl,\n    from: pathFrom\n  }\n}\n\nfunction entry () {\n  var cwd = process.cwd()\n  var file = resolve.sync('.', { basedir: cwd })\n  return file || 'index.js'\n}\n"}